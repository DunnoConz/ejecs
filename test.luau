-- Generated by JECS IDL Compiler
local jecs = require(game.ReplicatedStorage.jecs)
local world = jecs.World.new()

-- Component: Position
local Position = world:component()
type PositionData = {
    x: number,
    y: number,
    z: number,
}

-- Component: Velocity
local Velocity = world:component()
type VelocityData = {
    x: number,
    y: number,
    z: number,
}

-- Component: Health
local Health = world:component()
type HealthData = {
    max: number,
    current: number,
}

-- System: Movement
world:system({
    name = "Movement",
    callback = function(entity, components)

        local pos = components [ Position ];
        local vel = components [ Velocity ];
        pos.x = pos.x + vel.x;
        pos.y = pos.y + vel.y;
        pos.z = pos.z + vel.z;
        print(" Entity "..entity.." moved to("..pos.x..", "..pos.y..", "..pos.z..")");
    end
})

-- System: Health
world:system({
    name = "Health",
    callback = function(entity, components)

        local hp = components [ Health ];
        if hp.current <= 0 then print(" Entity "..entity.." has died ");
        world:destroyEntity(entity);
        end
    end
})

