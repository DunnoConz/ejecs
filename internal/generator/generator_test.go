package generator

import (
	"strings"
	"testing"

	"github.com/ejecs/ejecs/internal/ast"
)

func TestGenerator_Component(t *testing.T) {
	tests := []struct {
		name     string
		comp     *ast.Component
		expected string
	}{
		{
			name: "basic component",
			comp: &ast.Component{
				Name: "Position",
				Fields: []*ast.Field{
					{Name: "x", Type: "number"},
					{Name: "y", Type: "number"},
				},
			},
			expected: `Types.Position = {
    x = 0,
    y = 0,
}`,
		},
		{
			name: "component with attributes",
			comp: &ast.Component{
				Name:       "Player",
				Attributes: []string{"replicated", "networked"},
				Fields: []*ast.Field{
					{Name: "name", Type: "string"},
					{Name: "health", Type: "number"},
				},
			},
			expected: `Types.Player = {
    name = "",
    health = 0,
}`,
		},
	}

	g := New()

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			program := &ast.Program{
				Components: []*ast.Component{tt.comp},
			}
			got, err := g.Generate(program)
			if err != nil {
				t.Fatalf("Generate() error = %v", err)
			}

			// Normalize whitespace for comparison
			got = strings.TrimSpace(got)
			expected := strings.TrimSpace(tt.expected)

			if got != expected {
				t.Errorf("Generate() = %v, want %v", got, expected)
			}
		})
	}
}

func TestGenerator_System(t *testing.T) {
	tests := []struct {
		name     string
		sys      *ast.System
		expected string
	}{
		{
			name: "basic system",
			sys: &ast.System{
				Name:       "Movement",
				Components: []string{"Position", "Velocity"},
				Code:       "pos.x = pos.x + vel.x;\npos.y = pos.y + vel.y;",
			},
			expected: `Types.Movement = {
    components = {"Position", "Velocity"},
    run = function(pos, vel)
        pos.x = pos.x + vel.x
        pos.y = pos.y + vel.y
    end,
}`,
		},
		{
			name: "system with frequency and priority",
			sys: &ast.System{
				Name:       "Physics",
				Components: []string{"RigidBody"},
				Frequency:  "60hz",
				Priority:   1,
				Code:       "body.simulate();",
			},
			expected: `Types.Physics = {
    components = {"RigidBody"},
    frequency = "60hz",
    priority = 1,
    run = function(body)
        body.simulate()
    end,
}`,
		},
	}

	g := New()

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			program := &ast.Program{
				Systems: []*ast.System{tt.sys},
			}
			got, err := g.Generate(program)
			if err != nil {
				t.Fatalf("Generate() error = %v", err)
			}

			// Normalize whitespace for comparison
			got = strings.TrimSpace(got)
			expected := strings.TrimSpace(tt.expected)

			if got != expected {
				t.Errorf("Generate() = %v, want %v", got, expected)
			}
		})
	}
}

func TestGenerator_Relationship(t *testing.T) {
	tests := []struct {
		name     string
		rel      *ast.Relationship
		expected string
	}{
		{
			name: "basic relationship",
			rel: &ast.Relationship{
				Name: "ChildOf",
				From: "child",
				To:   "parent",
			},
			expected: `Types.ChildOf = {
    type = "one_to_one",
    from = "child",
    to = "parent",
}`,
		},
		{
			name: "relationship with type",
			rel: &ast.Relationship{
				Name: "Inventory",
				From: "item",
				To:   "container",
				Type: "many_to_one",
			},
			expected: `Types.Inventory = {
    type = "many_to_one",
    from = "item",
    to = "container",
}`,
		},
	}

	g := New()

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			program := &ast.Program{
				Relationships: []*ast.Relationship{tt.rel},
			}
			got, err := g.Generate(program)
			if err != nil {
				t.Fatalf("Generate() error = %v", err)
			}

			// Normalize whitespace for comparison
			got = strings.TrimSpace(got)
			expected := strings.TrimSpace(tt.expected)

			if got != expected {
				t.Errorf("Generate() = %v, want %v", got, expected)
			}
		})
	}
}

func TestGenerator_Complete(t *testing.T) {
	program := &ast.Program{
		Components: []*ast.Component{
			{
				Name: "Position",
				Fields: []*ast.Field{
					{Name: "x", Type: "number"},
					{Name: "y", Type: "number"},
				},
			},
		},
		Systems: []*ast.System{
			{
				Name:       "Movement",
				Components: []string{"Position", "Velocity"},
				Code:       "pos.x = pos.x + vel.x;\npos.y = pos.y + vel.y;",
			},
		},
		Relationships: []*ast.Relationship{
			{
				Name: "ChildOf",
				From: "child",
				To:   "parent",
			},
		},
	}

	expected := `-- Generated by EJECS

Types.Position = {
    x = 0,
    y = 0,
}

Types.ChildOf = {
    type = "one_to_one",
    from = "child",
    to = "parent",
}

Types.Movement = {
    components = {"Position", "Velocity"},
    run = function(pos, vel)
        pos.x = pos.x + vel.x
        pos.y = pos.y + vel.y
    end,
}

return Types`

	g := New()
	got, err := g.Generate(program)
	if err != nil {
		t.Fatalf("Generate() error = %v", err)
	}

	// Normalize whitespace for comparison
	got = strings.TrimSpace(got)
	expected = strings.TrimSpace(expected)

	if got != expected {
		t.Errorf("Generate() = %v, want %v", got, expected)
	}
}
